/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Title = string
export type Disabled = boolean
export type Readonly = boolean
export type Narrow = boolean
export type Label = string
export type Description = string
export type Steps = UISchemaStep[]
/**
 * whether or not the labels should be interpreted as locale keys
 */
export type Translate = boolean
/**
 * list of property names to determine form field order
 */
export type Order = string[]
export type Title1 = string
export type Description1 =
  | string
  | {
      [k: string]: string
    }
export type Help =
  | string
  | UIFormattedString
  | {
      [k: string]: string
    }
export type Key = string
export type Widget = string
export type Field = string
export type Data = string
export type Placeholder = string
export type Autofocus = boolean
export type Minimumrows = number
export type Text = string
export type Classes = string
export type Disabled1 = boolean | string
export type Readonly1 = boolean
export type Icon = string
export type Step = number
export type Type = string[] | string
export type Conditions = UICondition[]
export type Options = UIValuePair | string | number
export type Value = string
export type Label1 = string
export type Meta =
  | string
  | number
  | {
      [k: string]: any
    }

/**
 * Exported JSON+UI schema dictionary. JSONSchema is in `data` and ui is in `ui`
 */
export interface FormSchema {
  ui: UISchema
  data: JSONSchema
  [k: string]: any
}
/**
 * UISchema object that is associated with a JSONSchema. Contains form
 * configuration information, and a dictionary of properties.
 */
export interface UISchema {
  config: UISchemaConfig
  properties: UISchemaProps
  [k: string]: any
}
/**
 * Configuration object that holds top-level UI configuration for the
 * given model. This includes information about the order of items, how
 * many steps are in a form, whether or not to translate the given UI
 * strings, and more.
 */
export interface UISchemaConfig {
  title?: Title
  disabled?: Disabled
  readonly?: Readonly
  narrow?: Narrow
  steps?: Steps
  translate?: Translate
  order?: Order
  [k: string]: any
}
/**
 * Text data to display for a single step in a form with multiple steps
 */
export interface UISchemaStep {
  label: Label
  description?: Description
  [k: string]: any
}
/**
 * Dictionary of key/value where the key is a property name, and the value is a UIProp
 */
export interface UISchemaProps {
  [k: string]: UIProp
}
/**
 * Define UI attributes for the current FormProp
 */
export interface UIProp {
  title?: Title1
  description?: Description1
  help?: Help
  widget?: Widget
  field?: Field
  data?: Data
  placeholder?: Placeholder
  autoFocus?: Autofocus
  minimumRows?: Minimumrows
  text?: Text
  classes?: Classes
  disabled?: Disabled1
  readonly?: Readonly1
  icon?: Icon
  step?: Step
  messages?: Messages
  conditions?: Conditions
  options?: Options
  [k: string]: any
}
/**
 * A key into the localization table and a dictionary of values to be
 * used for substitution.
 */
export interface UIFormattedString {
  key: Key
  args: Args
  [k: string]: any
}
export interface Args {
  [k: string]: number | string
}
export interface Messages {
  [k: string]: UIFormattedString | string
}
/**
 * Determine if a field should be shown based some combination of other
 * fields in the Schema.
 */
export interface UICondition {
  type?: Type
  [k: string]: any
}
/**
 * A value/label pair that describes an item that can be shown in the
 * UI for selection from a list. Optionally includes a metadata field.
 */
export interface UIValuePair {
  value: Value
  label: Label1
  meta?: Meta
  [k: string]: any
}
/**
 * Relaxed placeholder type for JSONSchema objects.
 */
export interface JSONSchema {
  [k: string]: any
}
